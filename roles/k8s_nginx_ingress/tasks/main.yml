---
- name: Fail early if required variables are missing
  fail:
    msg: "metallb_ip_range must be set, not '{{ metallb_ip_range }}'"
  when: not metallb_ip_range

- name: Add bitnami chart repo
  community.kubernetes.helm_repository:
    name: bitnami
    repo_url: https://charts.bitnami.com/bitnami

- name: Add ingress_nginx helm repo
  community.kubernetes.helm_repository:
    name: ingress-nginx
    url: https://kubernetes.github.io/ingress-nginx

- name: Create namespaces
  community.kubernetes.k8s:
    api_version: v1
    kind: Namespace
    name: '{{ item }}'
  loop:
    - metallb-system
    - ingress-nginx

- block:
  - name: Install MetalLB
    community.kubernetes.helm:
      name: metallb
      namespace: metallb-system
      chart_ref: bitnami/metallb
      values:
        configInline:
          address-pools:
          - name: default
            protocol: layer2
            addresses:
            - '{{ metallb_ip_range }}'
      wait: yes

  rescue:
    - name: Uninstall failed metallb relesae
      community.kubernetes.helm:
        name: metallb
        namespace: metallb-system
        state: absent

    - name: Failed to install metallb
      fail:
        msg: 'Failed in task {{ ansible_failed_task.name }}, result: {{ ansible_failed_result }}'

- block:
  - name: Install ingress_nginx
    community.kubernetes.helm:
      name: ingress-nginx
      namespace: ingress-nginx
      chart_ref: ingress-nginx/ingress-nginx
      wait: yes

  rescue:
    - name: Uninstall failed ingress-nginx relesae
      community.kubernetes.helm:
        name: ingress-nginx
        namespace: ingress-nginx
        state: absent

    - name: Failed to install ingress-nginx
      fail:
        msg: 'Failed in task {{ ansible_failed_task.name }}, result: {{ ansible_failed_result }}'

- name: Wait for nginx service to receive an IP
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Service
    name: ingress-nginx-controller
    namespace: ingress-nginx
  register: ingress_nginx_svc
  until: "(ingress_nginx_svc.resources.0.status.get('loadBalancer', {}).get('ingress', []).0|default({})).ip is defined"
