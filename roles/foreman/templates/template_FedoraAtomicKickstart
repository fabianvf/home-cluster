<%#
kind: provision
name: Fedora Atomic {{ fedora_version }} Kickstart default
%>

lang <%= @host.params['lang'] || 'en_US.UTF-8' %>
keyboard <%= @host.params['keyboard'] || 'us' %>
timezone --utc <%= @host.params['time-zone'] || 'UTC' %>

<% subnet = @host.subnet -%>
<% if subnet.respond_to?(:dhcp_boot_mode?) -%>
<% dhcp = subnet.dhcp_boot_mode? && !@static -%>
<% else -%>
<% dhcp = !@static -%>
<% end -%>

network --bootproto <%= dhcp ? 'dhcp' : "static --ip=#{@host.ip} --netmask=#{subnet.mask} --gateway=#{subnet.gateway}" %> --hostname <%= @host %><%= " --device=#{@host.mac} --nameserver=#{[subnet.dns_primary, subnet.dns_secondary].select(&:present?).join(',')}" -%>

%include /tmp/part-include

%pre
#----- partitioning logic below--------------
# pick the first drive that is not removable and is over MINSIZE
DIR="/sys/block"

# minimum size of hard drive needed specified in GIGABYTES
MINSIZE=20

ROOTDRIVE=""

# /sys/block/*/size is in 512 byte chunks

for DEV in sda hda vda sdb hdb vdb sdc vdc sdd; do
  if [ -d $DIR/$DEV ]; then
    echo $DEV
    if [ -z $ROOTDRIVE ]; then
      ROOTDRIVE=$DEV
    fi
  fi
done

echo "ROOTDRIVE=$ROOTDRIVE"

cat << EOF > /tmp/part-include
# Partition clearing information
clearpart --all --initlabel --drives=$ROOTDRIVE
# Disk partitioning information
part /boot --fstype="xfs" --ondisk=$ROOTDRIVE --size=4096

part pv.297 --fstype="lvmpv" --ondisk=$ROOTDRIVE --size=0 --grow
volgroup cah pv.297 --pesize=4096
logvol swap  --fstype="swap" --size=4096 --name=swap --vgname=cah
logvol /  --fstype="xfs" --size=30720 --name=root --vgname=cah
zerombr

EOF

%end

bootloader --timeout=3 --append="ds=nocloud\;seedfrom=/var/cloud-init/"
text

ostreesetup --nogpg --osname="fedora-atomic" --remote="fedora-atomic-{{ fedora_version }}" --url="http://{{ foreman_hostname}}.{{ foreman_subdomain }}/atomic" --ref="fedora/{{ fedora_version }}/x86_64/testing/atomic-host"

services --enabled cloud-init,cloud-config,cloud-final,cloud-init-local,sshd,docker
rootpw --iscrypted <%= root_pass %>

reboot

%post
#---- Install our SSH key ----
mkdir -m0700 /root/.ssh/

cat <<EOF >/root/.ssh/authorized_keys
{{ authorized_keys }}
EOF

### set permissions
chmod 0600 /root/.ssh/authorized_keys

### fix up selinux context
restorecon -R /root/.ssh/

mkdir -p /etc/puppetlabs/puppet
cat <<EOF >/etc/puppetlabs/puppet/puppet.conf
<%= snippet 'puppet.conf' %>
EOF

#------------ configure cloud-init to run containerized puppet --------------
mkdir /var/cloud-init

cat << EOF>/var/cloud-init/meta-data
instance-id: iid-local<%= @host.id %>
local-hostname: <%= @host %>
EOF

cat << EOF>/var/cloud-init/user-data
#cloud-config
runcmd:
- "systemctl start docker"
- "docker pull docker.io/puppet/puppet-agent"
- "docker run -d --restart always --name puppet-agent --hostname <%= @host %> --net host -v /tmp:/tmp -v /etc:/etc -v /var:/var -v /usr:/usr -v /lib64:/lib64 --privileged puppet/puppet-agent agent --no-daemonize --certname <%= @host.certname %> --server <%= @host.puppetmaster %>"
EOF


# Report success back to Foreman
(curl -s -o /dev/null --insecure <%= foreman_url('built') %>
) 2>&1 | tee /mnt/sysimage/root/install.post.log

exit 0

%end
